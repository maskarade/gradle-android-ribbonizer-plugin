plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.shogo82148.ribbonizer'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.shogo82148.ribbonizer.example"
        minSdkVersion 30
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildTypes {
        debug {
            // debuggable build, which will ribbonized automatically.
        }
        beta {
            // debuggable build which will automatically ribbonized.
            debuggable true
        }
        canary {
            // non-debuggable build which will no automatically ribbonized.
            // But, we force one of its flavors. See `ribbonizer` for how-to
            debuggable false
        }
        release {
            // non-debuggable build. Will not be ribbonized automatically.
        }
    }

    flavorDimensions 'flavor'
    productFlavors {
        local {
            dimension 'flavor'
        }
        qa {
            dimension 'flavor'
        }
        staging {
            dimension 'flavor'
        }
        production {
            dimension 'flavor'
        }
    }
}

ribbonizer {
    // additional icons for ribbinizing
    // "manifest application[android:icon]" and "manifest application[android:round_icon]" are automatically added to the list
    iconNames "@drawable/dog", "@drawable/thinking"

    builder { variant, iconFile ->
        if (variant.flavorName == "local") {
            // change ribbon colors by product flavors
            return grayRibbonFilter(variant, iconFile)
        } else if (variant.flavorName == "qa") {
            // customColorRibbonFilter allows setting any color code
            def filter = customColorRibbonFilter(variant, iconFile, "#00C89C")
            // Finer control of the label text can be achieved by setting it manually, or set to
            // null for an unlabelled ribbon. The default is to use the flavor name.
            filter.label = "QA" + variant.versionCode
            filter.largeRibbon = (iconFile.name == "ic_launcher.png")
            return filter
        } else if (variant.buildType.name == "debug") {
            if (variant.flavorName == "production") {
                // Particular configurations can be skipped by returning no filters
                return null
            } else {
                // Other filters can be applied, as long as they implement Consumer<BufferedImage>
                return grayScaleFilter(variant, iconFile)
            }
        } else {
            // the default configure of ribbons
            return greenRibbonFilter(variant, iconFile)
        }
    }

    // Although `canary` build-type is marked as `non-debuggable`
    // we can still force specific variants to be ribbonized:
    forcedVariantsNames "localCanary"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
}